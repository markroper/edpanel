allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    repositories {
        mavenCentral()
    }

    jacoco { 
        toolVersion = "0.7.4.201502262128"
    }

    configurations {
        testArtifacts.extendsFrom testRuntime
    }
    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }
    artifacts {
        testArtifacts testJar
    }
}



idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
}

subprojects {
    evaluationDependsOn(':common')

    compileJava {
        options.compilerArgs << "-Werror"
        options.compilerArgs << "-Xlint:unchecked"
    }

    test {
        useTestNG() {
            useDefaultListeners = true
            def suiteFile = "src/test/resources/${project.name}-unit.xml"
            options.suites(suiteFile)
        }

        beforeTest { descriptor ->
            // logger.lifecycle("Running test: " + descriptor)
        }
    }
}

task integrationCodeCoverageReport(type: JacocoReport) {
    group 'Verification'
    description 'runs the integration tests against a local container with code coverage'
    
    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        html.destination "${buildDir}/reports/jacoco"
        csv.enabled false
    }
}

def loadProperty(pathRelToProjectDir, property) {
    Properties props = new Properties()
    props.load(new FileInputStream(projectDir.toString() + pathRelToProjectDir))
    return props.get(property).toString()
}

task refillDatabase(type: Exec) {
    group 'Database'
    description 'creates everything needed within the database'

    def dbPropsFilePath = "/warehouse/src/main/resources/database.properties"
    
    def database_user = loadProperty(dbPropsFilePath, "database.user");
    def database_pass = loadProperty(dbPropsFilePath, "database.pass");
    def database_host = loadProperty(dbPropsFilePath, "database.host");
    def database_port = loadProperty(dbPropsFilePath, "database.port");
    def database_name = loadProperty(dbPropsFilePath, "database.name");
    def database_ssl  = loadProperty(dbPropsFilePath, "database.ssl");
    
    def args = ['mysql', '-u' + database_user, '-p' + database_pass, '--port=' + database_port, '--host=' + database_host]
    if (database_ssl) { 
        println 'app configured to use SSL. Refilling DB over SSL...'
        args.add '--ssl-ca=/etc/ssl/certs/ssl-cert-myedpanel.ca-bundle'
    }
    commandLine args
    standardInput file("${project.rootDir.absolutePath}/database/createTableDDL.sql").newInputStream()
}

// run the integration tests before generating the report
integrationCodeCoverageReport.dependsOn {
      project(':warehouse').integrationLocalWithContainer
}

