buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        // all recent versions of liquibase gradle plugin specify a dependency on liquibase 3.4.2, which contains a
        // mySQL-specific bug that breaks hibernate validation (https://liquibase.jira.com/browse/CORE-2637)
        // To work around this, disable dependency management for selected liquibase dependencies with @jar notation 
        // and manually load in the proper runtime dependency (i.e. swap in liquibase 3.4.0 which works correctly)
        classpath "org.liquibase:liquibase-core:3.4.0"
        classpath "org.liquibase:liquibase-gradle-plugin:1.2.1@jar"
        classpath "org.liquibase:liquibase-groovy-dsl:1.2.1@jar"
        classpath "org.codehaus.groovy:groovy:2.4.1"
        classpath "org.codehaus.groovy:groovy-sql:2.4.1"
        classpath 'mysql:mysql-connector-java:5.1.36'
    }

}

apply plugin: 'org.liquibase.gradle'

//plugins {
//  id 'org.liquibase.gradle' version '1.1.1'
//}

configurations.all {
    resolutionStrategy {
        // fail eagerly on version conflict (includes transitive dependencies)
        // e.g. multiple different versions of the same dependency (group and name are equal)
        failOnVersionConflict()

//        exclude group: 'org.liquibase', module: 'liquibase-core'
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    apply plugin: 'idea'
    apply plugin: 'eclipse'

    repositories {
        mavenCentral()
    }

    jacoco { 
        toolVersion = "0.7.4.201502262128"
    }

    configurations {
        testArtifacts.extendsFrom testRuntime
    }
    task testJar(type: Jar) {
        classifier "test"
        from sourceSets.test.output
    }
    artifacts {
        testArtifacts testJar
    }

    //Dependencies section:
    ext {
        springVersion = "4.2.3.RELEASE"
        springSecurityVersion = "3.2.5.RELEASE"
        jacksonVersion = "2.6.0"
        apacheHttpVersion = "4.3.3"
        hibernateVersion = "5.0.4.Final"
        hibernateValidator = "5.2.2.Final"
    }
}


idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
    }
}

subprojects {
    evaluationDependsOn(':common')

    compileJava {
        options.compilerArgs << "-Werror"
        options.compilerArgs << "-Xlint:unchecked"
    }

    test {
        useTestNG() {
            useDefaultListeners = true
            def suiteFile = "src/test/resources/${project.name}-unit.xml"
            options.suites(suiteFile)
        }

        beforeTest { descriptor ->
            // logger.lifecycle("Running test: " + descriptor)
        }
    }
}

task integrationCodeCoverageReport(type: JacocoReport) {
    group 'Verification'
    description 'runs the integration tests against a local container with code coverage'
    
    // Gather execution data from all subprojects
    // (change this if you e.g. want to calculate unit test/integration test coverage separately)
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    // Add all relevant sourcesets from the subprojects
    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled true
        html.enabled true
        html.destination "${buildDir}/reports/jacoco"
        csv.enabled false
    }
}

def loadProperty(pathRelToProjectDir, property) {
    Properties props = new Properties()
    props.load(new FileInputStream(projectDir.toString() + pathRelToProjectDir))
    return props.get(property).toString()
}

task refillDatabase(type: Exec) {
    group 'Database'
    description 'creates everything needed within the database'

    def dbPropsFilePath = "/warehouse/src/main/resources/database.properties"
    
    def database_user = loadProperty(dbPropsFilePath, "database.user");
    def database_pass = loadProperty(dbPropsFilePath, "database.pass");
    def database_host = loadProperty(dbPropsFilePath, "database.host");
    def database_port = loadProperty(dbPropsFilePath, "database.port");
    def database_name = loadProperty(dbPropsFilePath, "database.name");
    def database_ssl  = loadProperty(dbPropsFilePath, "database.ssl");
    
    def args = [ './database/createdb.sh', database_user, database_pass, database_port, database_host]

    if (database_ssl?.equalsIgnoreCase("true")) { 
        println 'app configured to use SSL. Refilling DB over SSL...'
        args.add 'anything-in-5th-variable-enables-ssl'
    }
    commandLine args
}

// run the integration tests before generating the report
integrationCodeCoverageReport.dependsOn {
      project(':warehouse').integrationLocalWithContainer
}

dependencies {
    // used for database schema version control management
//    compile "org.liquibase:liquibase-core:3.4.2"
      compile "org.liquibase:liquibase-core:3.4.0"
//      runtime "org.liquibase:liquibase-core:3.4.0"
}

liquibase {
  activities {
    main {

      def dbPropsFilePath = "/warehouse/src/main/resources/database.properties"
   
        driver 'com.mysql.jdbc.Driver' 
      changeLogFile 'database/liquibase/db.changelog-master.xml' 
      url "jdbc:mysql://localhost:3306/scholar_warehouse"
//      username project.ext.mainUsername
//      password project.ext.mainPassword
        username 'warehouse'
        password 't3achTh3Childr3n'
    }
  }
  //runList = project.ext.runList
}

task printBuildScriptClasspath << {
    println project.buildscript.configurations.classpath.asPath
}
