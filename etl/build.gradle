apply plugin: 'application'

apply plugin: 'gradle-one-jar'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.rholder:gradle-one-jar:1.0.4'
    }
}

mainClassName = "com.scholarscore.etl.runner.EtlExecutable"

dependencies {

    compile project(':common'),
            project(':apiClient'),

            //MySQL dependencies
            // jordan 1/2016 -- I don't see how the ETL is using this and I'm switching
            // us over to the mariaDB connector, so commenting this out until something breaks...
            //'mysql:mysql-connector-java:5.1.6',
            
            "org.apache.httpcomponents:httpclient:$apacheHttpVersion",
            "org.apache.httpcomponents:httpcore:$apacheHttpVersion",
            "org.apache.httpcomponents:httpmime:$apacheHttpVersion",
            "commons-cli:commons-cli:1.3.1",
            "org.apache.commons:commons-csv:1.2"

    testCompile "org.testng:testng:6.8.8",
            "org.apache.httpcomponents:httpclient:$apacheHttpVersion",
            "org.apache.httpcomponents:httpcore:$apacheHttpVersion",
            "org.apache.httpcomponents:httpmime:$apacheHttpVersion",
            "org.springframework:spring-test:$springVersion",
            project (path: ":common", configuration: 'testArtifacts')

}

task fatJar(type: OneJar) {
    mainClass = mainClassName
}

task runEtl(type: Exec, dependsOn: fatJar) {
    group 'etl'
    description 'kick off the ETL that pulls in data from 3rd party systems (requires credential files)'
    commandLine './runEtl'
}

//Integration test suite
def getFileByPattern(File dir, String pat, String stripDir) {
    String path = ""
    if (dir.isDirectory()) {
        dir?.eachFileRecurse { file ->
            if (file.path ==~ pat) {
                path = file.getAbsolutePath().toString()
            }
        }
        if (null != path && !path.isEmpty())
            path = path?.substring(stripDir.length(), path?.length())
    }
    path
}

task etlFunctionalTests(type: Test) {
    group 'etl'
    description 'runs the ETL functional tests to ensure connectivity with 3rd party integrations'
    useTestNG() {
        useDefaultListeners = true
        def suiteFile = getFileByPattern(new File("$projectDir/src/test/resources/"), ".*-functional.xml", "$projectDir")
        if (suiteFile) options.suites(suiteFile)
    }
    testLogging.showStandardStreams = true

}
