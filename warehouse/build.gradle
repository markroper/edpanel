apply plugin: 'war'
apply plugin: 'com.bmuschko.tomcat'
apply plugin: 'com.bmuschko.cargo'

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-cargo-plugin:2.1.1'
        classpath 'org.akhikhl.gretty:gretty:1.1.8'
        classpath 'com.bmuschko:gradle-tomcat-plugin:2.2.2'
    }

}

Properties props = new Properties()
props.load(new FileInputStream(projectDir.toString() + "/src/test/resources/localhost.config.properties"))
def local_portnum = new URI(props.get("endpoint").toString()).port
def local_https_portnum = new URI(props.get("httpsEndpoint").toString()).port

war.archiveName = 'warehouse.war'

tomcat {
    httpPort = local_portnum
    httpsPort = local_https_portnum
    enableSSL = true
    contextPath = 'warehouse'
    daemon = true
}

//Integration test suite
def getFileByPattern(File dir, String pat, String stripDir) {
    String path = ""
    if (dir.isDirectory()) {
        dir?.eachFileRecurse { file ->
            if (file.path ==~ pat) {
                path = file.getAbsolutePath().toString()
            }
        }
        if (null != path && !path.isEmpty())
            path = path?.substring(stripDir.length(), path?.length())
    }
    path
}

task integrationLocal(type: Test) {
    group 'Verification'
    description 'runs the integration tests against a local container'
    
    useTestNG() {
        useDefaultListeners = true
        def suiteFile = getFileByPattern(new File("$projectDir/src/test/resources/"), ".*-integration.xml", "$projectDir")
        if (suiteFile) options.suites(suiteFile)
    }
    testLogging.showStandardStreams = true
    beforeTest { descriptor ->
        logger.lifecycle("RUNNING INTEGRATION TEST LOCALLY: " + descriptor)
    }
    tomcatStop.execute()
}

task integrationLocalWithContainer(type: Test) << {
    group 'Verification'
    description 'use tomcat to start a local container, then run the integrationLocal task, then stop container'
}

integrationLocalWithContainer.doFirst {
    war.execute()
    tomcatRunWar.execute()
    integrationLocal.execute()
}

// local server deployment
task appRun() << {
    tomcat.daemon = false
    tomcatRunWar.execute()
    def console = System.console()
    if (console) {
        console.readLine("PRESS CTRL+C or RETURN to abort execution of tomcat container");
    }
}

task appRunDebug() << {
    tomcat.daemon = false
    tomcatRunWar.execute()
    def console = System.console()
    if (console) {
        console.readLine("PRESS CTRL+C or RETURN to abort execution of tomcat container");
    }
}

// synthetic data gen
task syntheticDataGen(type: Test) {
    group 'datagen'
    description 'runs the synthetic data generation against the local container'
    useTestNG() {
        useDefaultListeners = true
        def suiteFile = getFileByPattern(new File("$projectDir/src/test/resources/"), ".*-datagen.xml", "$projectDir")
        if (suiteFile) options.suites(suiteFile)
    }
    testLogging.showStandardStreams = true
}


// cargo not used in development, only for deploying to running tomcat on 'hosted' machine
cargo {
    containerId = 'tomcat7x'

    remote {
        hostname = 'localhost'
        port = 8090
        username = 'cargo'
        password = '0BxLrz7zG4dqDX2q6vi4'
    }
}

//Dependencies section:
ext {
    springVersion = "4.2.0.RELEASE"
    springSecurityVersion = "3.2.5.RELEASE"
    jacksonVersion = "2.6.0"
    apacheHttpVersion = "4.3.3"
    tomcatVersion = '7.0.59'
}

dependencies {

    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}"

    compile project(':common'),
            "javax.servlet:javax.servlet-api:3.1.0",
            "javax.ws.rs:jsr311-api:1.1.1",
            "commons-codec:commons-codec:1.10",

            //MySQL dependencies
            'mysql:mysql-connector-java:5.1.6',
            //Spring dependencies
            "org.springframework:spring-aop:$springVersion",
            "org.springframework:spring-aspects:$springVersion",
            "org.springframework:spring-expression:$springVersion",
            "org.springframework:spring-instrument:$springVersion",
            "org.springframework:spring-instrument-tomcat:$springVersion",
            "org.springframework:spring-beans:$springVersion",
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-core:$springVersion",
            "org.springframework:spring-web:$springVersion",
            "org.springframework:spring-webmvc:$springVersion",
            "org.springframework:spring-jdbc:$springVersion",
            "org.springframework:spring-jms:$springVersion",
            "org.springframework:spring-tx:$springVersion",
            "org.springframework.security:spring-security-web:$springSecurityVersion",
            "org.springframework.security:spring-security-core:$springSecurityVersion",
            "org.springframework.security:spring-security-config:$springSecurityVersion",

            //Jackson for JSON & XML API serialization
            "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion",
            "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion",
            "com.fasterxml.jackson.core:jackson-core:$jacksonVersion",
            "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion",
            "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:$jacksonVersion",
            "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:$jacksonVersion",
            "com.fasterxml.jackson.module:jackson-module-scala_2.10:$jacksonVersion",
            //Swagger for API documentation, & dependent JARs
            "org.hibernate:hibernate-core:4.3.11.Final",
            "com.wordnik:swagger-core_2.10:1.3.2",
            "com.wordnik:swagger-annotations:1.3.2",
            "com.knappsack:swagger4spring-web:0.3.3",
            "org.scala-lang:scala-library:2.11.4",
            "org.javassist:javassist:3.17.1-GA",
            //Needed for hibernate bean validation which was added to support swagger
            "javax.validation:validation-api:1.1.0.Final",
            "org.hibernate:hibernate-validator:5.1.0.Final",
            "org.hibernate:hibernate-validator-annotation-processor:5.1.0.Final",
            "org.hibernate:hibernate-validator-cdi:5.1.0.Final"
       
    testCompile "org.testng:testng:6.8.8",
            "org.apache.httpcomponents:httpclient:$apacheHttpVersion",
            "org.apache.httpcomponents:httpcore:$apacheHttpVersion",
            "org.apache.httpcomponents:httpmime:$apacheHttpVersion",
            "org.springframework:spring-test:$springVersion"

    runtime "javax.servlet:jstl:1.2"
}
